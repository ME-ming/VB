<?xml version="1.0"?>
<doc>
<assembly>
<name>
MyVisualBasic
</name>
</assembly>
<members>
<member name="P:MyVisualBasic.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:MyVisualBasic.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:MyVisualBasic.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:MyVisualBasic.My.Security.Base64_Encode(System.String)">
	<summary>
 Base64加密算法
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.Base64_Encode(System.String,System.Text.Encoding)">
	<summary>
 Base64加密算法
 </summary>
	<param name="Source">要加密的字符串</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.Base64_Decode(System.String)">
	<summary>
 Base64解密算法
 </summary>
	<param name="Source">要解密的字符串</param>
	<returns>解密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.Base64_Decode(System.String,System.Text.Encoding)">
	<summary>
 Base64解密算法
 </summary>
	<param name="Source">要解密的字符串</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>解密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.MD5_Lower16_Encode(System.String)">
	<summary>
 MD5加密算法（返回16位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.MD5_Upper16_Encode(System.String)">
	<summary>
 MD5加密算法（返回16位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.MD5_Lower32_Encode(System.String)">
	<summary>
 MD5加密算法（返回32位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.MD5_Upper32_Encode(System.String)">
	<summary>
 MD5加密算法（返回32位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA1_Lower40_Encode(System.String)">
	<summary>
 SHA1加密算法（返回40位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA1_Upper40_Encode(System.String)">
	<summary>
 SHA1加密算法（返回40位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA256_Lower64_Encode(System.String)">
	<summary>
 SHA256加密算法（返回64位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA256_Upper64_Encode(System.String)">
	<summary>
 SHA256加密算法（返回64位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA384_Lower96_Encode(System.String)">
	<summary>
 SHA384加密算法（返回96位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA384_Upper96_Encode(System.String)">
	<summary>
 SHA384加密算法（返回96位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA512_Lower128_Encode(System.String)">
	<summary>
 SHA512加密算法（返回128位小写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.SHA512_Upper128_Encode(System.String)">
	<summary>
 SHA512加密算法（返回128位大写结果）
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.DES_Encode(System.String,System.String)">
	<summary>
 DES加密算法
 </summary>
	<param name="Source">要加密的字符串</param>
	<param name="SecretKey">加密密钥（8的整数倍字节数的字符串）</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.DES_Decode(System.Byte[],System.String)">
	<summary>
 DES解密算法
 </summary>
	<param name="Source">要解密的字符串</param>
	<param name="SecretKey">解密密钥（8的整数倍字节数的字符串）</param>
	<returns>解密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.RSA_Encode(System.String)">
	<summary>
 RSA加密算法
 </summary>
	<param name="Source">要加密的字符串</param>
	<returns>加密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Security.RSA_Decode(System.Byte[])">
	<summary>
 RSA解密算法
 </summary>
	<param name="Source">要解密的字符串</param>
	<returns>解密后的结果字符串</returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.Security">
	<summary>
 编码与解码函数
 </summary>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Http.GetString(System.String)">
	<summary>
 获取网页源码
 </summary>
	<param name="URL">网页链接</param>
	<returns>网页源码字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Http.GetString(System.String,System.Text.Encoding)">
	<summary>
 获取网页源码
 </summary>
	<param name="URL">网页链接</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>网页源码字符串</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Http.DownloadFile(System.String,System.String)">
	<summary>
 下载文件到磁盘
 </summary>
	<param name="URL">文件链接</param>
	<param name="FilePath">文件保存路径（可以是相对路径）</param>
	<returns>是否下载成功</returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.Http">
	<summary>
 网络访问函数
 </summary>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.SaveStringArray(System.Collections.ArrayList@,System.String)">
	<summary>
 将字符串数组写入文件
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否写入成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.SaveStringArray(System.Collections.Generic.List{System.String}@,System.String)">
	<summary>
 将字符串数组写入文件
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否写入成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.SaveStringArray(System.String[]@,System.String)">
	<summary>
 将字符串数组写入文件
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否写入成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.Collections.ArrayList@,System.String)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.Collections.ArrayList@,System.String,System.Text.Encoding)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.Collections.Generic.List{System.String}@,System.String)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.Collections.Generic.List{System.String}@,System.String,System.Text.Encoding)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.String[]@,System.String)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadStringArray(System.String[]@,System.String,System.Text.Encoding)">
	<summary>
 读取文件中的字符串数组
 </summary>
	<param name="StringArray">字符串数组</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.GetAllFilePath(System.Collections.Generic.List{System.String}@,System.String)">
	<summary>
 获取指定目录下的全部的文件
 </summary>
	<param name="FilePathArray">保存文件路径的字符串数组</param>
	<param name="SearchDirectory">要搜索的文件夹路径</param>
	<returns>是否获取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.GetFileLine(System.Int32@,System.String)">
	<summary>
 获取指定文件的行数
 </summary>
	<param name="FileLine">文件行数</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<returns>是否获取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.GetFileLine(System.Int32@,System.String,System.Text.Encoding)">
	<summary>
 获取指定文件的行数
 </summary>
	<param name="FileLine">文件行数</param>
	<param name="FilePath">文件路径（可以是相对路径）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否获取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.WriteResourceFile(System.String,System.String)">
	<summary>
 将程序嵌入的资源文件写入为磁盘文件（注意必须在解决方案资源管理器中，将图片资源的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<param name="FilePath">写入到磁盘的文件路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourcePicture(System.Drawing.Bitmap@,System.String)">
	<summary>
 读取程序嵌入的图片类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourcePicture">图片</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceString(System.String@,System.String)">
	<summary>
 读取程序嵌入的文本类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceString">文本</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceString(System.String@,System.String,System.Text.Encoding)">
	<summary>
 读取程序嵌入的文本类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceString">文本</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.Collections.ArrayList@,System.String)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.Collections.ArrayList@,System.String,System.Text.Encoding)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.Collections.Generic.List{System.String}@,System.String)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.Collections.Generic.List{System.String}@,System.String,System.Text.Encoding)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.String[]@,System.String)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadResourceArray(System.String[]@,System.String,System.Text.Encoding)">
	<summary>
 读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
 </summary>
	<param name="ResourceArray">字符串数组</param>
	<param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
	<param name="Encoding">使用的编码格式（默认UTF-8）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.CreatLinkFile(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 创建快捷方式
 </summary>
	<param name="TargetPath">快捷方式指向的路径（建议使用绝对路径，使用相对路径时，默认将以桌面作为父目录）</param>
	<param name="LinkFilePath">快捷方式文件的路径（可以是相对路径，如"1.lnk"）</param>
	<param name="Arguments">打开程序的参数（例如"/?"）</param>
	<param name="Description">鼠标悬停在快捷方式上的描述</param>
	<param name="WorkingDirectory">快捷方式的起始位置（不设置此参数时，按照系统默认，自动设置为快捷方式指向的路径的父目录）</param>
	<returns>是否创建成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.IO.ReadLinkFile(System.String@,System.String)">
	<summary>
 读取快捷方式指向的路径
 </summary>
	<param name="TargetPath">快捷方式指向的路径（获得完整的绝对路径）</param>
	<param name="LinkFilePath">快捷方式文件的路径（可以是相对路径，如"1.lnk"）</param>
	<returns>是否读取成功</returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.IO">
	<summary>
 磁盘读写函数
 </summary>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchForward(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从第一个开始字符串的位置，向后搜寻结束字符串，取出中间的部分）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串（无结果时返回空字符串）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchBackward(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从最后一个结束字符串的位置，向前搜寻开始字符串，取出中间的部分）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串（无结果时返回空字符串）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchMiddle(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从第一个开始字符串的位置，向后搜寻最后一个结束字符串的位置，取出中间的部分）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串（无结果时返回空字符串）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchAllForward(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从第一个开始字符串的位置，向后搜寻结束字符串，取出中间的部分，重复向后搜索，返回数组）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串数组（无结果时返回空数组）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchAllBackward(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从最后一个结束字符串的位置，向前搜寻开始字符串，取出中间的部分，重复向前搜索，返回数组）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串数组（无结果时返回空数组）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.SearchAllMiddle(System.String@,System.String,System.String)">
	<summary>
 搜索字符串（从第一个开始字符串的位置，向后搜寻最后一个结束字符串的位置，取出中间的部分，重复向中间搜索，返回数组）
 </summary>
	<param name="SourceCode">要搜索的字符串</param>
	<param name="BeginString">开始字符串</param>
	<param name="EndString">结束字符串</param>
	<returns>搜索结果字符串数组（无结果时返回空数组）</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Intersect(System.Collections.ArrayList@,System.Collections.ArrayList@)">
	<summary>
 对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Intersect(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
	<summary>
 对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Intersect(System.String[]@,System.String[]@)">
	<summary>
 对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Union(System.Collections.ArrayList@,System.Collections.ArrayList@)">
	<summary>
 对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Union(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
	<summary>
 对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Union(System.String[]@,System.String[]@)">
	<summary>
 对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Except(System.Collections.ArrayList@,System.Collections.ArrayList@)">
	<summary>
 对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Except(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
	<summary>
 对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.StringData.Except(System.String[]@,System.String[]@)">
	<summary>
 对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
 </summary>
	<param name="StringArray1">字符串数组</param>
	<param name="StringArray2">字符串数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.StringData">
	<summary>
 字符串处理函数
 </summary>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Html.GetTextByTagName(System.String,System.String)">
	<summary>
 获取网页源码中指定标签的元素的文本
 </summary>
	<param name="Source">网页源代码</param>
	<param name="HtmlTag">元素标签</param>
	<returns>文本字符串数组</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.Html.GetTextById(System.String,System.String)">
	<summary>
 获取网页源码中指定ID的元素的文本
 </summary>
	<param name="Source">网页源代码</param>
	<param name="Id">元素ID</param>
	<returns>文本字符串</returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.Html">
	<summary>
 HTML代码处理函数
 </summary>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.MyApplication">
	<summary>
 访问应用程序信息和服务
 </summary>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.ShutDown(System.Int32)">
	<summary>
 延时关闭计算机（注意会取代之前可能存在的关机计划）
 </summary>
	<param name="DelaySecond">延时时间（单位秒，最多可以延时10年）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.ShutDownReboot(System.Int32)">
	<summary>
 延时重启计算机（注意会取代之前可能存在的关机计划）
 </summary>
	<param name="DelaySecond">延时时间（单位秒，最多可以延时10年）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.ShutDownAbort">
	<summary>
 取消关机计划（没有关机计划时则无效果）
 </summary>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.TaskRun(System.String)">
	<summary>
 打开指定的程序（多次调用本函数会打开程序的多个实例，新打开的程序会夺取鼠标焦点）
 </summary>
	<param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.ShellRun(System.String)">
	<summary>
 打开指定的程序（多次调用本函数会打开程序的多个实例，新打开的程序不会夺取鼠标焦点）
 </summary>
	<param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.TaskKill(System.String)">
	<summary>
 关闭指定的程序（程序如果有多个实例，会一并结束，多次调用本函数无特别效果）
 </summary>
	<param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.ShellKill(System.String)">
	<summary>
 关闭指定的程序（程序如果有多个实例，会一并结束，多次调用本函数无特别效果）
 </summary>
	<param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreen(System.String)">
	<summary>
 获取屏幕截图（默认保存格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenBmp(System.String)">
	<summary>
 获取屏幕截图（bmp格式，实测1920*1080分辨率的截图文件大小为7.91M，文件大小最大）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenPng(System.String)">
	<summary>
 获取屏幕截图（png格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenJpeg(System.String)">
	<summary>
 获取屏幕截图（jpeg格式，实测1920*1080分辨率的截图文件大小为212K，文件大小最小）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenGif(System.String)">
	<summary>
 获取屏幕截图（gif格式，实测1920*1080分辨率的截图文件大小为232K，文件大小较小）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenIcon(System.String)">
	<summary>
 获取屏幕截图（ico格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenTiff(System.String)">
	<summary>
 获取屏幕截图（tiff格式，实测1920*1080分辨率的截图文件大小为388K，文件大小较大）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenExif(System.String)">
	<summary>
 获取屏幕截图（exif格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenMemoryBmp(System.String)">
	<summary>
 获取屏幕截图（memorybmp格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenEmf(System.String)">
	<summary>
 获取屏幕截图（emf格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenWmf(System.String)">
	<summary>
 获取屏幕截图（wmf格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenThumbnail(System.String)">
	<summary>
 获取屏幕缩略图（默认保存格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为157K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenPngThumbnail(System.String)">
	<summary>
 获取屏幕缩略图（png格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为157K，文件大小中等）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="M:MyVisualBasic.My.MyComputer.SaveScreenJpegThumbnail(System.String)">
	<summary>
 获取屏幕缩略图（jpeg格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为64K，文件大小最小）
 </summary>
	<param name="ScreenFilePath">截图文件保存路径</param>
	<returns>是否执行成功</returns>
	<remarks></remarks>
</member><member name="T:MyVisualBasic.My.MyComputer">
	<summary>
 访问主机及其资源、服务和数据
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>